{
    "abstractTypeDecl": {
        "signature": "type name",
        "description": "An abstract type definition associates a name with a type without specifying the type. In generated code, the type is specified externally (e.g., as a C++ class).",
        "parameters": {
            "name": "C++ type name"
        },
        "stateMap": ["type", "name"]
    },
    "arrayDecl": {
        "signature": "array name = [ sizeExpression ] typeName (default defaultExpression)? (format formatLiteral)?",
        "description": "An array definition defines a new array type and associates a name with it.",
        "parameters": {
            "name": "Name of array",
            "sizeExpression": "Size of array",
            "typeName": "Array element type",
            "defaultExpression": "Array default value",
            "formatLiteral": "Default string literal format to include in dictionary definition"
        },
        "stateMap": {
            "array": [143],
            "name": [144],
            "=": [145],
            "[": [146],
            "sizeExpression": [147],
            "]": [148],
            "typeName": [149],
            "default": [150, 152],
            "defaultExpression": [151],
            "format": [154, 156],
            "formatLiteral": [155]
        }
    },
    "commandDecl": {
        "signature": "commandKind command name (param-list)? (opcode opcodeExpr)? (priority priorityExpr)? queue-full-behavior?",
        "description": "A command specifier specifies a command as part of a component definition.",
        "parameters": {
            "commandKind": "The command kind specifies the kind of the command. It is similar to the kind of a port instance specifier, except that different commands on the same port can have different kinds.",
            "name": "Name of command",
            "param-list": "The parameter list specifies the command parameters. If there are no parameters, the list may be omitted. ref may not appear in any of the parameters.",
            "opcodeExpr": "opcode specifies the numeric opcode for the command. If it is present, its type must be convertible to Integer, and must evaluate to a nonnegative integer. If it is not present, then the default opcode is either zero (for the first opcode appearing in a component) or the previous opcode plus one.",
            "priorityExpr": "Specifies a priority for the command on the input queue. It must be convertible to Integer. The priority expression is valid only if the kind of the command is async.",
            "queue-full-behavior": "specifies the behavior of the command when the input full is queue. This specifier is valid only if the kind of the command is async. If no specifier appears, then the default behavior is assert."
        },
        "stateMap": {
            "commandKind": [208],
            "command": [209],
            "name": [210],
            "opcodeExpression": [215],
            "priorityExpression": [219]
        }
    },
    "componentInstanceDecl": {
        "signature": "instance name : component base id baseIdExpr (type C++ type)? (at includeFile)? (queue size queueSize)? (stack size stackSize)? (priority priorityExpr)? (cpu cpuExpr)? { init-specifier-sequence }",
        "description": "A component instance definition defines an instance of a component that you can refer to in a topology definition.",
        "parameters": {
            "name": "Name of component instance",
            "component": "A qualified identifier referencing a component definition",
            "baseIdExpr": [
                "Associates a base identifier with the component instance.",
                " * Must evaluate to a nonnegative integer after type conversion.",
                " * For each component instance, for each command, event, telemetry, or parameter identifier, the identifier associated with the instance is computed by adding the base identifier specified here to the relative identifier specified in the component. For this purpose, command opcodes are identifiers.",
                " * For each instance, this procedure creates a range of identifiers, from the base identifier to the largest identifier associated with the instance. If the component has no identifiers, then this range is empty.",
                " * No instance may have a base identifier that lies within the identifier range of another instance."
            ],
            "C++ type": [
                "Names the implementation type of the instance",
                "The type must be a valid type in the target language (e.g., a type name in C++). If the implementation type is not present, then the code generator infers the name of the implementation type from the component name when generating the constructor for the instance.",
                "For Example:",
                "a. Suppose an FPP model has a component C defined in module M. Suppose I is an instance of component `M.C`. By default, the implementation type associated with I is `M::C`.",
                "b. Specifying type `M::D` causes FPP to generate a constructor for I with name `M::D` instead of `M::C`.",
                "",
                "Specifying an implementation type is useful in cases where the name of the component implementation does not match the component name, e.g., because there are several implementations of the same FPP component."
            ],
            "includeFile": "File path, relative to the location of the component instance definition. The file path must name a file in the target language (e.g., a C++ header file) that provides the implementation associated with the instance. If no such path is given, then the translator uses the location of the component instance and the name of the component to generate a default implementation path.",
            "queueSize": [
                "Specifies the queue size for active and queued components. The queue size is required for active and queued components and is not allowed for passive components.",
                "Must evaluate to a nonnegative integer after type conversion."
            ],
            "stackSize": [
                "Specifies the stack size in bytes for active components. The stack size is optional for active components and is not allowed for queued or passive components.",
                "Must evaluate to a nonnegative integer after type conversion."
            ],
            "priorityExpr": "Specifies the thread priority for active components. The priority is optional for active components and is not allowed for queued or passive components.",
            "cpuExpr": "Specifies the CPU affinity for active components. The CPU affinity is optional for active components and is not allowed for queued or passive components."
        },
        "stateMap": {
            "instance": [449],
            "name": [450],
            ":": [451],
            "component": [452],
            "base": [453],
            "id": [454],
            "baseIdExpr": [455],
            "C++ type": [457],
            "includeFile": [461],
            "queue size": [464, 465],
            "queueSize": [466],
            "stack size": [469, 470],
            "stackSize": [471],
            "priorityExpr": [475],
            "cpuExpr": [479]
        }
    },
    "componentInstanceSpec": {
        "signature": "private? instance componentInstance",
        "description": "A component instance specifier specifies that a component instance is part of a topology.",
        "parameters": {
            "private": "A private instance does not appear in a topology in which this topology is imported",
            "componentInstance": "The qualified identifier must refer to a component instance."
        },
        "stateMap": {
            "private": [560, 559],
            "instance": [562],
            "componentInstance": [563]
        }
    },
    "constantDecl": {
        "signature": "constant name = expression",
        "description": "A constant definition associates a name with a compile-time constant value. You can use the name in place of the value elsewhere in the model.",
        "parameters": {
            "name": "Name of constant",
            "expression": "expression must evaluate to a compile-time constant value."
        },
        "stateMap": {
            "constant": [158],
            "name": [159],
            "=": [160],
            "expression": [161]
        }
    },
    "structMember": {
        "signature": "name: [n]? type (format formatLiteral)?",
        "description": "",
        "parameters": {
            "name": "Name of struct member",
            "n": "Creates an array of size n",
            "type": "Member type"
        },
        "stateMap": {
            "name": [163],
            ":": [164],
            "[": [165],
            "n": [166],
            "]": [167],
            "type": [169, 171],
            "format": [172, 174],
            "formatLiteral": [173]
        }
    },
    "structDecl": {
        "signature": "struct name { members } (default defaultExpr)?",
        "description": "A struct definition defines a new structure type and associates a name with it.",
        "parameters": {
            "name": "Name of struct type",
            "defaultExpr": "Specifies the default value associated with the type. The type of the expression must be convertible to T. If the expression specifies a value for a member with size greater than one, then the value is applied to each element."
        },
        "stateMap": {
            "struct": [176],
            "name": [177],
            "{": [178],
            "}": [199],
            "default": [200, 202],
            "defaultExpr": [201]
        }
    },
    "paramDecl": {
        "signature": "param name: type (default defaultExpr)? (id idExpr)? (set opcode setOpcode)? (save opcode saveOpcode)?",
        "description": "A parameter specifier specifies a parameter as part of a component definition.",
        "parameters": {
            "name": "",
            "type": "",
            "defaultExpr": "Specifies a default value for the parameter when it does not exist in the parameter database",
            "idExpr": "Specifies a numeric identifier for the parameter. Must be convertible to an integer.",
            "setOpcode": "Opcode of the command for setting the parameter.",
            "saveOpcode": "Opcode of the command for saving the parameter to the database."
        },
        "stateMap": {
            "param": [225],
            "name": [226],
            ":": [227],
            "type": [228],
            "default": [231, 229],
            "defaultExpr": [230],
            "id": [235, 233],
            "idExpr": [234],
            "set opcode": [240, 237, 238],
            "setOpcode": [239],
            "save opcode": [245, 242, 243],
            "saveOpcode": [244]
        }
    },
    "generalPortInstanceDecl": {
        "signature": "generalPortKind port name : [portNum]? port-instance-type (priority priorityExpr)? queue-full-behavior?",
        "description": "Specifies an instantiated port as part of a component definition.",
        "parameters": {
            "portNum": "Number of port instances to instatiate",
            "priorityExpr": "Applies to the component’s message queue and may appear only for async input ports. The meaning of the priority value is operating system-dependent.",
            "queue-full-behavior": [
                "The optional queue-full-behavior specifies the behavior when a message is received and the queue is full:",
                " * assert means that an assertion fails, terminating FSW.",
                " * block means that the sender is blocked until there is space on the queue for the message.",
                " * drop means that the message is dropped.",
                " * This specifier is valid only for async input ports. If no specifier appears, then the default behavior is assert."
            ]
        },
        "stateMap": {
            "generalPortKind": [278],
            "port": [279],
            "name": [280],
            ":": [281],
            "[": [282],
            "portNum": [283],
            "]": [284],
            "port-instance-type": [286, 288],
            "priority": [291, 289],
            "priorityExpr": [290],
            "queue-full-behavior": [294, 293]
        }
    },
    "specialPortInstanceDecl": {
        "signature": "specialPortKind port name",
        "description": "These port instances correspond to the \"role ports\" in the F Prime XML model. Their types and other attributes are specified by F Prime. The identifier specifies the name of the port.",
        "parameters": {},
        "stateMap": ["specialPortKind", "port", "name"]
    },
    "telemetryChannelDecl": {
        "signature": "telemetry name : type (id idExpr) (update telemetry-update)? (format formatLiteral)? ( low { telemetryLow } )? ( high { telemetryHigh } )?",
        "description": "Defines a telemetry channel as part of a component definition.",
        "parameters": {
            "telemetry-update": "Specifies whether the telemetry channel is emitted always or on change. If the specifier is not present, the default behavior is always.",
            "formatLiteral": "Specifies a format string. There is one argument to the format string, which is the channel value.",
            "lowLimit": "Specifies the low limit for the channel",
            "highLimit": "Specifies the high limit for the channel"
        },
        "stateMap": {
            "telemetry": [333],
            "name": [334],
            ":": [335],
            "type": [336],
            "id": [339, 337],
            "idExpr": [338],
            "update": [343, 341],
            "telemetry-update": [342],
            "format": [347, 345],
            "formatLiteral": [346],
            "low": [351, 349],
            "lowLimit": [350],
            "high": [355, 353],
            "highLimit": [354]
        }
    },
    "eventDecl": {
        "signature": "event name param-list? severity severityKeyword (id idExpr)? format formatLiteral (throttle throttleExpr)?",
        "description": "",
        "parameters": {
            "severityKeyword": "Severity of the event",
            "formatLiteral": "Format string that formats the event for display on the ground. The arguments to the format string are the values bound to the event parameters. A numeric format is allowed for any argument whose type is a numeric type.",
            "throttleExpr": "Specifies the maximum number of times to emit the event before throttling it. The type of e must be convertible to Integer and must evaluate to an integer."
        },
        "stateMap": {
            "event": [407],
            "name": [408],
            "param-list": [409, 410],
            "severity": [412],
            "severityKeyword": [413],
            "id": [414],
            "idExpr": [415],
            "format": [416, 418],
            "formatLiteral": [419],
            "throttle": [420, 422],
            "throttleExpr": [421]
        }
    },
    "includeStmt": {
        "signature": "include includeFile",
        "description": "Specifies that a file should be included in a translation unit.",
        "parameters": {
            "includeFile": [
                "The string literal specifies a file path relative to the location of the include specifier.",
                "The suffix .fppi is conventional for included files, to distinguish them from files presented directly for analysis or translation."
            ]
        },
        "stateMap": ["include", "includeFile"]
    },
    "matchStmt": {
        "signature": "match target with source",
        "description": "Specifies that when the component is instantiated and connected into a topology, the corresponding port numbers of two of its port instances should match. For example, a port matching specifier could specify that for a health monitoring component, any component connected to its ping output port at port number n should also be connected to its ping input port at the same port number n.",
        "parameters": {
            "target": "Identifier reference output port instance",
            "source": "Identifier reference input port instance"
        },
        "stateMap": ["match", "target", "with", "source"]
    },
    "internalPortDecl": {
        "signature": "internal port name param-list? (priority priorityExpr)? queue-full-behavior?",
        "description": "Specifies a single-use port for use in handlers of the enclosing component. A component can use an internal port to send a message to itself.",
        "parameters": {
            "param-list": "Parameters sent as part of the internal message",
            "queue-full-behavior": "Same as async input ports"
        },
        "stateMap": {
            "internal": [432],
            "port": [433],
            "name": [434],
            "param-list": [435, 436],
            "priority": [438, 440],
            "priorityExpr": [439],
            "queue-full-behavior": [442, 443]
        }
    },
    "portDecl": {
        "signature": "port name param-list? (-> returnType)?",
        "description": "Defines an F Prime port. A port is the endpoint of a connection between F Prime components.",
        "parameters": {
            "param-list": "Parameters sent as part of the message",
            "returnType": "Return type used when port is invoked in a synchronous context"
        },
        "stateMap": {
            "port": [550],
            "name": [551],
            "param-list": [553, 552],
            "->": [557, 555],
            "returnType": [556]
        }
    },
    "connection": {
        "signature": "output -> input",
        "description": "Connects output port on a component instance to an input port",
        "parameters": {
            "output": "Reference to the an output port instance",
            "input": "Reference to an input port instance"
        },
        "stateMap": {
            "output": [572],
            "->": [573],
            "input": [574]
        }
    }
}
